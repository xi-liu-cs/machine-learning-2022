Rubric
Answers are autograded with hidden test cases. For each problem, an answer is considered correct if it passes all tests (no partial credits).

Reference solutions
Reference solutions for the problems are listed below. (Note that these are example solutions; many other correct solutions exist.)

Part 1
def solve_system(equations):
    """"
    Takes in a list of strings for each equation.
    Returns a numpy array with a row for each equation value
    """
    N = len(equations)
    is_num_with_sign = lambda x: all([c in "+-0123456789." for c in x])

    lhs = [x.split("=")[0].strip().split() for x in equations]
    rhs = [float(x.split("=")[1].strip()) for x in equations]
    A = np.zeros((N, N))
    b = np.array(rhs).reshape(N, 1)
    for i in range(len(lhs)):
        row = lhs[i]
        coef = 1.0
        sign = 1
        for sym in row:
            if sym in "+-":
                sign = 1 if sym == "+" else -1
            elif is_num_with_sign(sym):
                coef = float(sym)
            elif sym in "abcd":
                A[i, "abcd".index(sym)] += sign * coef
                coef = 1.0
                sign = 1
    return np.linalg.solve(A, b)
Part 2
def split_into_train_and_test(x_all_LF, frac_test=0.5, seed=None):
    if seed is None:
        rng = np.random.RandomState()
    
    if isinstance(seed, int):
        rng = np.random.RandomState(seed)
    
    idx = [i for i in range(x_all_LF.shape[0])]
    test_idx = rng.choice(idx, size=int(frac_test * x_all_LF.shape[0]), replace=False)
    train_idx = list(set(idx) - set(test_idx))

    return x_all_LF[train_idx], x_all_LF[test_idx]
Part 3
def closest_interval(intervals):
    V = []
    N = len(intervals)
    
    # Loop to iterate intervals[]
    for i in range(0, N):
        V.append([intervals[i][0], i])
 
    # Sort the vector V
    V.sort()
    
    # Stores the resultant vector
    res = [-1 for _ in range(N)]
 
    # Loop to iterate intervals[]
    for i in range(0, N):
        # Calculate the closest
        # interval to the right
        j = i+1 
        flag = False
        while j < N:
            if V[j][0] > intervals[V[i][1]][1]:
                flag = True
                break
            j += 1
        if flag:
            res[V[i][1]] = V[j][1]

    return res